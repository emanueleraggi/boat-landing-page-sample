{"ast":null,"code":"var _jsxFileName = \"/home/labrat/cashman-integration/client/src/pages/GoogleMap.js\";\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport GoogleMapReact from 'google-map-react'; // import { InfoWindow } from 'google-maps-react'\n\nimport ShipTracker from '../components/ShipTracker';\nimport SideBar from '../components/SideBar';\nimport { Ship } from '../components/ShipTracker';\nimport Client from '../Contentful'; // import InfoWindowMap from '../components/InfoWindowEx';\n\nimport { MyInfoWindowWidget } from \"../components/MyInfoWindow\";\nimport { MyDropDown } from \"../components/MyDropDownMenu\"; // import { dummyData } from \"../components/DummyData\"\n\nimport { shipCompanyMap } from \"../components/ShipTracker\";\nimport Polyline from \"../components/Polyline\"; // import icon from '../logos/weeksmarine.png';\n// import MapControl from '../components/MapControl';\n// import { MarkerClickHandle } from '../components/ShipTracker';\n// \tgrid-template-areas: \"google-map   sidebar\" \"ship-tracker sidebar\";\n\nconst MapContainer = styled.div`\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    grid-template-rows: 1fr 200px;\n    grid-gap: 10px;\n    height: 100vh;\n    grid-template-areas: \"google-map   sidebar\" \"ship-tracker sidebar\";\n\n    .google-map {\n        background: #424242;\n        grid-area: google-map;\n        position: relative;\n        height: 100%;\n        width: 100%;\n    }\n    .map-sidebar {\n        background: #9dc183;\n        grid-area: sidebar;\n    }\n    .ship-tracker {\n        grid-area: ship-tracker;\n    }\n    option.active {\n        background: yellow;\n    }\n`; // var expanded = false;\n// function showCheckboxes() {\n// \tvar checkboxes = document.getElementById('checkboxes');\n// \tif (!expanded) {\n// \t\tcheckboxes.style.display = 'block';\n// \t\texpanded = true;\n// \t} else {\n// \t\tcheckboxes.style.display = 'none';\n// \t\texpanded = false;\n// \t}\n// }\n\nclass BoatMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentWillMount = async () => {\n      const shipTypeResults = await Client.getEntries({\n        content_type: 'cashmanCompetitors'\n      });\n      const shipTypes = shipTypeResults.items.map(data => data.fields);\n      const logoMap = shipTypes.reduce((acc, type) => {\n        return { ...acc,\n          [type.name]: type.images.fields.file.url\n        };\n      }, {});\n      this.setState({\n        shipTypes: Array.from(shipTypes),\n        logoMap: logoMap\n      });\n    };\n\n    this.handleMarkerClick = (event, data) => {\n      this.props.setActiveShip(data.AIS.NAME, data.AIS.LATITUDE, data.AIS.LONGITUDE); // console.log('marker click');\n      // console.log(event.target, data);\n      // console.log(data.AIS.NAME);\n      // return data;\n      // this.props.setActiveShip(data.NAME, data.LATITUDE, data.LONGITUDE, this.state.ships.images);\n    };\n\n    this.handleMarkerHoverOnShip = (event, data) => {\n      this.setState({\n        showingInfoWindow: true,\n        hoverOnActiveShip: data\n      });\n      clearTimeout(this.state.delayHandler);\n    };\n\n    this.handleMarkerHoverOffInfoWin = event => {\n      let delayHandler = setTimeout(() => {\n        this.setState({\n          showingInfoWindow: false,\n          hoverOnActiveShip: null\n        });\n      }, 1000); // 1s to disappear\n\n      this.setState({\n        delayHandler: delayHandler\n      });\n    };\n\n    this.handleMarkerHoverOnInfoWin = event => {\n      clearTimeout(this.state.delayHandler);\n    };\n\n    this.changeFilteredShips = options => {\n      if (options === 'All') {\n        this.setState({\n          filteredShips: this.state.ships\n        });\n      } else {\n        const filteredShips = this.state.ships.filter(ship => {\n          return options.includes(shipCompanyMap[ship.AIS.NAME]);\n        });\n        this.setState({\n          filteredShips: filteredShips\n        });\n      }\n    };\n\n    this.setTrajectoryData = (data, color) => {\n      this.setState({\n        trajectoryData: data,\n        trajectoryColor: color\n      });\n    };\n\n    this.state = {\n      buttonEnabled: false,\n      buttonClickedAt: new Date(),\n      progress: 0,\n      ships: [],\n      filteredShips: [],\n      type: 'All',\n      shipTypes: [],\n      activeShipTypes: [],\n      logoMap: {},\n      showingInfoWindow: false,\n      hoverOnActiveShip: null,\n      delayHandler: null,\n      mapControlShouldRender: false,\n      trajectoryColor: 'white',\n      trajectoryData: [],\n      mapLoaded: false\n    };\n    this.updateRequest = this.updateRequest.bind(this);\n    this.countDownInterval = null;\n    this.updateInterval = null;\n    this.map = null;\n    this.maps = null;\n    this.previousTimeStamp = null;\n  }\n\n  async componentDidMount() {\n    this.countDownInterval = setInterval(() => {// if (!this.state.buttonClickedAt) return;\n      // const date = new Date();\n      // const diff = Math.floor((date.getTime() - this.state.buttonClickedAt.getTime()) / 1000);\n      // if (diff < 90) {\n      // \tthis.setState({\n      // \t\tprogress: diff,\n      // \t\tbuttonEnabled: false\n      // \t});\n      // } else {\n      // \tthis.setState({\n      // \t\tprogress: 0,\n      // \t\tbuttonClickedAt: null,\n      // \t\tbuttonEnabled: true\n      // \t});\n      // }\n    }, 500);\n    await this.updateRequest(); // let newShips = localStorage.getItem('shipData');\n    // debugger;\n    // if (newShips) {\n    // \tthis.setState({ ships: newShips });\n    // }\n\n    this.updateInterval = setInterval(() => {\n      this.updateRequest(); // console.log('interval', Date());\n    }, 65 * 1000); // this.setState({ updateInterval });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.type !== prevState.type) {\n      console.log('dropdown value changed for ' + this.state.type);\n    }\n  }\n\n  componentWillUnmount() {\n    // this.state.updateInterval;\n    // clearInterval(this.countdownInterval);\n    clearInterval(this.updateInterval);\n  }\n\n  async updateRequest() {\n    const url = 'http://localhost:3001/hello';\n    const fetchingData = await fetch(url);\n    const ships = await fetchingData.json();\n    console.log('fetched ships', ships); // solve the TypeError: this.state.ships.map is not a function\n    // const ships = dummyData;\n    // if (JSON.stringify(ships) !== '{}'){\n    // if (this.previousTimeStamp === null) {\n    //     this.previousTimeStamp = ships.reduce(\n    //         function(obj, ship) {\n    //             obj[ship.AIS.NAME] = ship.AIS.TIMESTAMP;\n    //             return obj;\n    //         }, {}\n    //     );\n\n    if (Array.isArray(ships)) {\n      // the new check for array response\n      if (this.previousTimeStamp === null) {\n        this.previousTimeStamp = ships.reduce(function (obj, ship) {\n          obj[ship.AIS.NAME] = ship.AIS.TIMESTAMP;\n          return obj;\n        }, {});\n      } // }\n\n\n      this.setState({\n        ships: ships,\n        filteredShips: ships\n      });\n      this.props.callbackFromParent(ships);\n\n      for (let ship of ships) {\n        if (this.previousTimeStamp !== null) {\n          if (this.previousTimeStamp[ship.AIS.NAME] === ship.AIS.TIMESTAMP) {\n            this.previousTimeStamp[ship.AIS.NAME] = ship.AIS.TIMESTAMP;\n            console.log(\"Same timestamp: \", ship.AIS.NAME, ship.AIS.TIMESTAMP);\n            continue;\n          } else {\n            this.previousTimeStamp[ship.AIS.NAME] = ship.AIS.TIMESTAMP;\n          }\n        }\n\n        let _ship = {\n          name: ship.AIS.NAME,\n          callsign: ship.AIS.CALLSIGN,\n          heading: ship.AIS.HEADING,\n          sog: ship.AIS.TYPE,\n          // unknown abbr.\n          imo: ship.AIS.IMO,\n          mmsi: ship.AIS.MMSI,\n          longitude: ship.AIS.LONGITUDE,\n          latitude: ship.AIS.LATITUDE,\n          date: new Date(ship.AIS.TIMESTAMP)\n        };\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(_ship)\n        };\n        await fetch('http://localhost:3001/users/vessles/map/latlng', requestOptions); // console.log('Post', Date());\n      }\n    }\n  } // handleChange = (e) => {\n  // \tthis.setState({\n  // \t\ttype: e.target.value\n  // \t});\n  // \tconsole.log(e.target.value);\n  // };\n\n\n  render() {\n    const noHoverOnShip = this.state.hoverOnActiveShip === null; // console.log(\"color\", this.state.trajectoryColor);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"google-map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapReact // ships={this.state.ships}\n    , {\n      bootstrapURLKeys: {\n        key: 'AIzaSyBm59I3P5VB3JR25MWz-GKgf4PZs8XEsqc'\n      },\n      center: {\n        lat: this.props.activeShip ? this.props.activeShip.latitude : 37.99,\n        lng: this.props.activeShip ? this.props.activeShip.longitude : -97.31\n      },\n      zoom: 5.5,\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => {\n        this.map = map;\n        this.maps = maps; // we need this setState to force the first mapcontrol render\n\n        this.setState({\n          mapControlShouldRender: true,\n          mapLoaded: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }\n    }, this.state.mapLoaded && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Polyline, {\n      map: this.map,\n      maps: this.maps,\n      markers: this.state.trajectoryData,\n      lineColor: this.state.trajectoryColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 25\n      }\n    })), Array.isArray(this.state.filteredShips) ? this.state.filteredShips.map(ship => /*#__PURE__*/React.createElement(Ship, {\n      ship: ship,\n      key: ship.AIS.MMSI,\n      lat: ship.AIS.LATITUDE,\n      lng: ship.AIS.LONGITUDE,\n      logoMap: this.state.logoMap,\n      logoClick: this.handleMarkerClick,\n      logoHoverOn: this.handleMarkerHoverOnShip,\n      logoHoverOff: this.handleMarkerHoverOffInfoWin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 25\n      }\n    })) : 'Loading...', /*#__PURE__*/React.createElement(MyInfoWindowWidget, {\n      show: this.state.showingInfoWindow,\n      ship: this.state.hoverOnActiveShip,\n      logoMap: this.state.logoMap,\n      lat: noHoverOnShip ? -1 : this.state.hoverOnActiveShip.AIS.LATITUDE,\n      lng: noHoverOnShip ? -1 : this.state.hoverOnActiveShip.AIS.LONGITUDE,\n      shipFromDatabase: this.props.shipFromDatabase,\n      closeInfoWindow: this.handleMarkerHoverOffInfoWin,\n      keepInfoWindow: this.handleMarkerHoverOnInfoWin,\n      setTrajectoryData: this.setTrajectoryData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(MyDropDown, {\n      shipTypes: this.state.shipTypes,\n      activeShipTypes: this.state.activeShipTypes,\n      map: this.map || null,\n      controlPosition: this.maps ? this.maps.ControlPosition.LEFT_TOP : null,\n      changeFilteredShips: this.changeFilteredShips,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default class GoogleMap extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ships: [],\n      activeShipTypes: [],\n      activeCompanies: [],\n      activeShip: null,\n      shipFromDatabase: []\n    };\n\n    this.handleDropdownChange = e => {\n      const shipType = e.target.value;\n\n      if (this.state.activeShipTypes.includes(shipType)) {\n        const filteredShipTypes = this.state.activeShipTypes.filter(type => type !== shipType);\n        this.setState({\n          activeShipTypes: filteredShipTypes\n        });\n      } else {\n        this.setState({\n          activeShipTypes: [...this.state.activeShipTypes, shipType]\n        });\n      }\n    };\n\n    this.setActiveShip = (name, latitude, longitude) => {\n      this.setState({\n        activeShip: {\n          name,\n          latitude,\n          longitude\n        }\n      });\n    };\n\n    this.setShipDatabase = ships => {\n      this.setState({\n        shipFromDatabase: ships\n      });\n    };\n\n    this.callbackFromParent = ships => {\n      this.setState({\n        ships\n      });\n    };\n  }\n\n  render() {\n    // const images = markedShip ? markedShip.images : null;\n    return /*#__PURE__*/React.createElement(MapContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 17\n      }\n    }, JSON.stringify(this.state.activeShip, null, 2)), /*#__PURE__*/React.createElement(BoatMap, {\n      setActiveShip: this.setActiveShip,\n      activeShip: this.state.activeShip,\n      handleDropdownChange: this.handleDropdownChange,\n      callbackFromParent: this.callbackFromParent,\n      shipFromDatabase: this.state.shipFromDatabase,\n      renderMyDropDown: this.state.renderMyDropDown // activeWindow={this.setActiveWindow}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(SideBar // markedShip={images}\n    , {\n      activeShip: this.state.activeShip,\n      activeShipTypes: this.state.activeShipTypes,\n      shipInfoWithAIS: this.state.ships,\n      setActiveShip: this.setActiveShip,\n      setShipDatabase: this.setShipDatabase,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ShipTracker, {\n      ships: this.state.ships,\n      setActiveShip: this.setActiveShip,\n      onMarkerClick: this.handleMarkerClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/labrat/cashman-integration/client/src/pages/GoogleMap.js"],"names":["React","Component","styled","GoogleMapReact","ShipTracker","SideBar","Ship","Client","MyInfoWindowWidget","MyDropDown","shipCompanyMap","Polyline","MapContainer","div","BoatMap","constructor","props","componentWillMount","shipTypeResults","getEntries","content_type","shipTypes","items","map","data","fields","logoMap","reduce","acc","type","name","images","file","url","setState","Array","from","handleMarkerClick","event","setActiveShip","AIS","NAME","LATITUDE","LONGITUDE","handleMarkerHoverOnShip","showingInfoWindow","hoverOnActiveShip","clearTimeout","state","delayHandler","handleMarkerHoverOffInfoWin","setTimeout","handleMarkerHoverOnInfoWin","changeFilteredShips","options","filteredShips","ships","filter","ship","includes","setTrajectoryData","color","trajectoryData","trajectoryColor","buttonEnabled","buttonClickedAt","Date","progress","activeShipTypes","mapControlShouldRender","mapLoaded","updateRequest","bind","countDownInterval","updateInterval","maps","previousTimeStamp","componentDidMount","setInterval","componentDidUpdate","prevProps","prevState","console","log","componentWillUnmount","clearInterval","fetchingData","fetch","json","isArray","obj","TIMESTAMP","callbackFromParent","_ship","callsign","CALLSIGN","heading","HEADING","sog","TYPE","imo","IMO","mmsi","MMSI","longitude","latitude","date","requestOptions","method","headers","body","JSON","stringify","render","noHoverOnShip","key","lat","activeShip","lng","shipFromDatabase","ControlPosition","LEFT_TOP","GoogleMap","activeCompanies","handleDropdownChange","e","shipType","target","value","filteredShipTypes","setShipDatabase","renderMyDropDown"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport GoogleMapReact from 'google-map-react';\n// import { InfoWindow } from 'google-maps-react'\nimport ShipTracker from '../components/ShipTracker';\nimport SideBar from '../components/SideBar';\nimport { Ship } from '../components/ShipTracker';\nimport Client from '../Contentful';\n// import InfoWindowMap from '../components/InfoWindowEx';\nimport { MyInfoWindowWidget } from \"../components/MyInfoWindow\"\nimport { MyDropDown } from \"../components/MyDropDownMenu\"\n// import { dummyData } from \"../components/DummyData\"\nimport { shipCompanyMap } from \"../components/ShipTracker\"\nimport Polyline from \"../components/Polyline\"\n\n// import icon from '../logos/weeksmarine.png';\n\n// import MapControl from '../components/MapControl';\n// import { MarkerClickHandle } from '../components/ShipTracker';\n// \tgrid-template-areas: \"google-map   sidebar\" \"ship-tracker sidebar\";\n\nconst MapContainer = styled.div`\n    display: grid;\n    grid-template-columns: 2fr 1fr;\n    grid-template-rows: 1fr 200px;\n    grid-gap: 10px;\n    height: 100vh;\n    grid-template-areas: \"google-map   sidebar\" \"ship-tracker sidebar\";\n\n    .google-map {\n        background: #424242;\n        grid-area: google-map;\n        position: relative;\n        height: 100%;\n        width: 100%;\n    }\n    .map-sidebar {\n        background: #9dc183;\n        grid-area: sidebar;\n    }\n    .ship-tracker {\n        grid-area: ship-tracker;\n    }\n    option.active {\n        background: yellow;\n    }\n`;\n\n// var expanded = false;\n// function showCheckboxes() {\n// \tvar checkboxes = document.getElementById('checkboxes');\n// \tif (!expanded) {\n// \t\tcheckboxes.style.display = 'block';\n// \t\texpanded = true;\n// \t} else {\n// \t\tcheckboxes.style.display = 'none';\n// \t\texpanded = false;\n// \t}\n// }\n\nclass BoatMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttonEnabled: false,\n            buttonClickedAt: new Date(),\n            progress: 0,\n            ships: [],\n            filteredShips: [],\n            type: 'All',\n            shipTypes: [],\n            activeShipTypes: [],\n            logoMap: {},\n            showingInfoWindow: false,\n            hoverOnActiveShip: null,\n            delayHandler: null,\n            mapControlShouldRender: false,\n            trajectoryColor: 'white',\n            trajectoryData: [],\n            mapLoaded: false,\n        };\n        this.updateRequest = this.updateRequest.bind(this);\n        this.countDownInterval = null;\n        this.updateInterval = null;\n        this.map = null;\n        this.maps = null;\n        this.previousTimeStamp = null;\n    }\n\n    async componentDidMount() {\n        this.countDownInterval = setInterval(() => {\n            // if (!this.state.buttonClickedAt) return;\n            // const date = new Date();\n            // const diff = Math.floor((date.getTime() - this.state.buttonClickedAt.getTime()) / 1000);\n            // if (diff < 90) {\n            // \tthis.setState({\n            // \t\tprogress: diff,\n            // \t\tbuttonEnabled: false\n            // \t});\n            // } else {\n            // \tthis.setState({\n            // \t\tprogress: 0,\n            // \t\tbuttonClickedAt: null,\n            // \t\tbuttonEnabled: true\n            // \t});\n            // }\n        }, 500);\n\n        await this.updateRequest();\n\n        // let newShips = localStorage.getItem('shipData');\n        // debugger;\n\n        // if (newShips) {\n        // \tthis.setState({ ships: newShips });\n        // }\n\n        this.updateInterval = setInterval(() => {\n            this.updateRequest();\n            // console.log('interval', Date());\n        }, 65 * 1000);\n        // this.setState({ updateInterval });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.type !== prevState.type) {\n            console.log('dropdown value changed for ' + this.state.type);\n        }\n    }\n\n    componentWillUnmount() {\n        // this.state.updateInterval;\n        // clearInterval(this.countdownInterval);\n        clearInterval(this.updateInterval);\n    }\n\n    componentWillMount = async () => {\n        const shipTypeResults = await Client.getEntries({\n            content_type: 'cashmanCompetitors'\n        });\n        const shipTypes = shipTypeResults.items.map((data) => data.fields);\n        const logoMap = shipTypes.reduce((acc, type) => {\n            return {\n                ...acc,\n                [type.name]: type.images.fields.file.url\n            };\n        }, {});\n        this.setState({shipTypes: Array.from(shipTypes), logoMap: logoMap});\n    }\n\n    async updateRequest() {\n        const url = 'http://localhost:3001/hello';\n        const fetchingData = await fetch(url);\n        const ships = await fetchingData.json();\n        console.log('fetched ships', ships);\n\n        // solve the TypeError: this.state.ships.map is not a function\n        // const ships = dummyData;\n\n        // if (JSON.stringify(ships) !== '{}'){\n\n            // if (this.previousTimeStamp === null) {\n            //     this.previousTimeStamp = ships.reduce(\n            //         function(obj, ship) {\n            //             obj[ship.AIS.NAME] = ship.AIS.TIMESTAMP;\n            //             return obj;\n            //         }, {}\n            //     );\n            if (Array.isArray(ships)) { // the new check for array response\n                if (this.previousTimeStamp === null) {\n                  this.previousTimeStamp = ships.reduce(function (obj, ship) {\n                    obj[ship.AIS.NAME] = ship.AIS.TIMESTAMP;\n                    return obj;\n                  }, {});\n                }\n            // }\n\n            this.setState({\n                ships: ships,\n                filteredShips: ships,\n            });\n\n            this.props.callbackFromParent(ships);\n            \n            for (let ship of ships) {\n                if (this.previousTimeStamp !== null) {\n                    if (this.previousTimeStamp[ship.AIS.NAME] === ship.AIS.TIMESTAMP) {\n                        this.previousTimeStamp[ship.AIS.NAME] = ship.AIS.TIMESTAMP;\n                        console.log(\"Same timestamp: \", ship.AIS.NAME, ship.AIS.TIMESTAMP);\n                        continue;\n                    } else {\n                        this.previousTimeStamp[ship.AIS.NAME] = ship.AIS.TIMESTAMP;\n                    }\n                }\n\n                let _ship = {\n                    name: ship.AIS.NAME,\n                    callsign: ship.AIS.CALLSIGN,\n                    heading: ship.AIS.HEADING,\n                    sog: ship.AIS.TYPE, // unknown abbr.\n                    imo: ship.AIS.IMO,\n                    mmsi: ship.AIS.MMSI,\n                    longitude: ship.AIS.LONGITUDE,\n                    latitude: ship.AIS.LATITUDE,\n                    date: new Date(ship.AIS.TIMESTAMP)\n                };\n                const requestOptions = {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(_ship),\n                };\n                await fetch('http://localhost:3001/users/vessles/map/latlng', requestOptions);\n                // console.log('Post', Date());\n            }\n        }\n    }\n\n    // handleChange = (e) => {\n    // \tthis.setState({\n    // \t\ttype: e.target.value\n    // \t});\n    // \tconsole.log(e.target.value);\n    // };\n\n    handleMarkerClick = (event, data) => {\n        this.props.setActiveShip(data.AIS.NAME, data.AIS.LATITUDE, data.AIS.LONGITUDE);\n        // console.log('marker click');\n        // console.log(event.target, data);\n        // console.log(data.AIS.NAME);\n        // return data;\n        // this.props.setActiveShip(data.NAME, data.LATITUDE, data.LONGITUDE, this.state.ships.images);\n    };\n\n    handleMarkerHoverOnShip = (event, data) => {\n        this.setState({\n                showingInfoWindow: true,\n                hoverOnActiveShip: data});\n        clearTimeout(this.state.delayHandler)\n    };\n\n    handleMarkerHoverOffInfoWin = (event) => {\n        let delayHandler = setTimeout(\n            () => {\n                this.setState({\n                    showingInfoWindow: false, \n                    hoverOnActiveShip: null,\n            })}, 1000) // 1s to disappear\n        this.setState({ delayHandler: delayHandler })\n    };\n\n    handleMarkerHoverOnInfoWin = (event) => {\n        clearTimeout(this.state.delayHandler)\n    }\n\n    changeFilteredShips = (options) => {\n        if (options === 'All') {\n            this.setState({filteredShips: this.state.ships})\n        } else {\n            const filteredShips = this.state.ships.filter((ship) => {\n                return options.includes(shipCompanyMap[ship.AIS.NAME])\n            });\n            this.setState({filteredShips: filteredShips});\n        }\n    }\n\n    setTrajectoryData = (data, color) => {\n        this.setState({trajectoryData: data,\n                       trajectoryColor: color })\n    }\n\n    render() {\n        const noHoverOnShip = this.state.hoverOnActiveShip === null;\n        // console.log(\"color\", this.state.trajectoryColor);\n        return (\n            <div className=\"google-map\">\n                <GoogleMapReact\n                    // ships={this.state.ships}\n                    bootstrapURLKeys={{ key: 'AIzaSyBm59I3P5VB3JR25MWz-GKgf4PZs8XEsqc' }}\n                    center={{\n                        lat: this.props.activeShip ? this.props.activeShip.latitude : 37.99,\n                        lng: this.props.activeShip ? this.props.activeShip.longitude : -97.31\n                    }}\n                    zoom={5.5}\n                    onGoogleApiLoaded={({map, maps}) => {\n                        this.map = map;\n                        this.maps = maps;\n                        // we need this setState to force the first mapcontrol render\n                        this.setState({mapControlShouldRender: true, mapLoaded: true})\n                      }}\n                >\n\n                    {/* {this.state.mapLoaded ? \n                        <div>\n                            <Polyline\n                                map={this.map}\n                                maps={this.maps}\n                                markers={this.state.trajectoryData}\n                                lineColor={this.state.trajectoryColor}>\n                            </Polyline>\n                        </div>\n                    : ''} */}\n\n                    { this.state.mapLoaded && (\n                    <div>\n                        <Polyline\n                            map={this.map}\n                            maps={this.maps}\n                            markers={this.state.trajectoryData}\n                            lineColor={this.state.trajectoryColor}\n                        />\n                    </div>) \n                    }\n                    {/* {filteredShips.map((ship) => (\n                        <Ship ship={ship} key={ship.CALLSIGN} lat={ship.LATITUDE} lng={ship.LONGITUDE} />\n                    ))} */}\n\n                    {/* Rendering all the markers here */}\n                    {/* {this.state.filteredShips.map((ship) => (\n                        <Ship\n                            ship={ship}\n                            key={ship.AIS.MMSI}\n                            lat={ship.AIS.LATITUDE}\n                            lng={ship.AIS.LONGITUDE}\n                            logoMap={this.state.logoMap}\n                            logoClick={this.handleMarkerClick}\n                            logoHoverOn={this.handleMarkerHoverOnShip}\n                            logoHoverOff={this.handleMarkerHoverOffInfoWin}\n                            // logoHoverOff={this.handleMarkerHoverOff}\n                            // windowClickOpen={this.handleWindow}\n                        />\n                    ))} */}\n\n                    {Array.isArray(this.state.filteredShips)\n                    ? this.state.filteredShips.map((ship) => (\n                        <Ship\n                        ship={ship}\n                        key={ship.AIS.MMSI}\n                        lat={ship.AIS.LATITUDE}\n                        lng={ship.AIS.LONGITUDE}\n                        logoMap={this.state.logoMap}\n                        logoClick={this.handleMarkerClick}\n                        logoHoverOn={this.handleMarkerHoverOnShip}\n                        logoHoverOff={this.handleMarkerHoverOffInfoWin}\n                        />\n                    ))\n                    : 'Loading...'\n                    }\n\n\n                    <MyInfoWindowWidget\n                        show={this.state.showingInfoWindow}\n                        ship={this.state.hoverOnActiveShip}\n                        logoMap={this.state.logoMap}\n                        lat={noHoverOnShip ? -1 : this.state.hoverOnActiveShip.AIS.LATITUDE}\n                        lng={noHoverOnShip ? -1 : this.state.hoverOnActiveShip.AIS.LONGITUDE}\n                        shipFromDatabase={this.props.shipFromDatabase}\n                        closeInfoWindow={this.handleMarkerHoverOffInfoWin}\n                        keepInfoWindow={this.handleMarkerHoverOnInfoWin}\n                        setTrajectoryData={this.setTrajectoryData}\n                    />\n\n                    {/* Below are the hard-coded values. They should come from the external container Contentful.  */}\n                    {/* The values in the Contentful are exactly the same: DONJON, DUTRA, MANSON etc... */}\n\n                    {/* <select className=\"combo-companies\" onClick={this.props.handleDropdownChange}>\n                        {console.log(\"drop down shipTypes: \", this.state.shipTypes)}\n\n                        {this.state.shipTypes.map((type) => {\n                            // console.log(\"drop down type\",type);\n                            return (\n                                <option\n                                    className={this.state.activeShipTypes.includes(type) ? 'active' : ''}\n                                    key={type.images.sys.id}\n                                    value={type.name}\n                                >\n                                    {type.name}\n                                </option>\n                            );\n                        })}\n                    </select> */}\n                    <MyDropDown\n                        shipTypes={this.state.shipTypes}\n                        activeShipTypes={this.state.activeShipTypes}\n                        map={this.map || null}\n                        controlPosition={this.maps ? this.maps.ControlPosition.LEFT_TOP : null}\n                        changeFilteredShips={this.changeFilteredShips}\n                    />\n                    \n                    {/* <div class=\"progress-circle p0\">\n                        <span>{this.state.progress}%</span>\n                        <div class=\"left-half-clipper\">\n                            <div class=\"first50-bar\" />\n                            <div class=\"value-bar\" />\n                        </div>\n                    </div>\n                    <button className=\"btn-next-request\" onClick={() => this.updateRequest()}>\n                        Time to Next API Request\n                    </button> */}\n\n                    {/* <InfoWindowEx marker={this.state.activeMarker} visible={this.state.showingInfoWindow}>\n                        <div>\n                            <h3>{this.state.selectedPlace.name}</h3>\n                            <button type=\"button\" onClick={this.showDetails.bind(this, this.state.selectedPlace)}>\n                                Show details\n                            </button>\n                        </div>\n                    </InfoWindowEx> */}\n                </GoogleMapReact>\n            </div>\n        );\n    }\n}\n\nexport default class GoogleMap extends React.Component {\n    state = {\n        ships: [],\n        activeShipTypes: [],\n        activeCompanies: [],\n        activeShip: null,\n        shipFromDatabase: [],\n    };\n\n    // async componentDidMount() {\n    // \tconst url = 'http://localhost:3001/hello';\n    // \t// console.log(url);\n    // \tconst fetchingData = await fetch(url);\n    // \tconst ships = await fetchingData.json();\n\n    // \tconsole.log('fetched ships', ships);\n    // \t//console.log(ships);\n\n    // \tthis.setState({\n    // \t\tships\n    // \t});\n    // }\n\n    handleDropdownChange = (e) => {\n        const shipType = e.target.value;\n\n        if (this.state.activeShipTypes.includes(shipType)) {\n            const filteredShipTypes = this.state.activeShipTypes.filter((type) => type !== shipType);\n            this.setState({\n                activeShipTypes: filteredShipTypes\n            });\n        } else {\n            this.setState({\n                activeShipTypes: [ ...this.state.activeShipTypes, shipType ]\n            });\n        }\n    };\n\n    setActiveShip = (name, latitude, longitude) => {\n        this.setState({\n            activeShip: {\n                name,\n                latitude,\n                longitude\n            }\n        });\n    };\n\n    setShipDatabase = (ships) => {\n        this.setState({shipFromDatabase: ships})\n    }\n\n    // passing data from children to parent\n    callbackFromParent = (ships) => {\n        this.setState({ships})\n    }\n\n    render() {\n        // const images = markedShip ? markedShip.images : null;\n        return (\n            <MapContainer>\n                {/* This is the Google Map Tracking Page */}\n                <pre>{JSON.stringify(this.state.activeShip, null, 2)}</pre>\n                <BoatMap\n                    setActiveShip={this.setActiveShip}\n                    activeShip={this.state.activeShip}\n                    handleDropdownChange={this.handleDropdownChange}\n                    callbackFromParent={this.callbackFromParent}\n                    shipFromDatabase={this.state.shipFromDatabase}\n                    renderMyDropDown={this.state.renderMyDropDown}\n                    // activeWindow={this.setActiveWindow}\n                />\n                <SideBar\n                    // markedShip={images}\n                    activeShip={this.state.activeShip}\n                    activeShipTypes={this.state.activeShipTypes}\n                    shipInfoWithAIS={this.state.ships}\n                    setActiveShip={this.setActiveShip}\n                    setShipDatabase={this.setShipDatabase}\n                />\n                <ShipTracker\n                    ships={this.state.ships}\n                    setActiveShip={this.setActiveShip}\n                    onMarkerClick={this.handleMarkerClick}\n                />\n            </MapContainer>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}