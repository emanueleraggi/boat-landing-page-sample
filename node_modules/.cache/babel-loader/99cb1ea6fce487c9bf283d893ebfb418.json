{"ast":null,"code":"var _jsxFileName = \"/home/labrat/cashman-integration/client/src/components/MyInfoWindow.js\";\nimport React, { Component } from 'react';\nimport { shipCompanyMap } from \"../components/ShipTracker\"; // import Chart from 'chart.js'\n// import { withGoogleMap, GoogleMap, Polyline  } from 'react-google-maps'\n\nimport { Parser } from 'json2csv';\nimport { CSVLink } from \"react-csv\";\nimport '../components/ShipTracker.css'; // import { DatePicker } from '../components/DatePicker';\n\nimport DateRangePickerWrapper from \"../components/MyDatePicker\";\nexport class MyInfoWindowWidget extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeCalendarSelected = isSeleced => {\n      this.isCalendarSeleced = isSeleced;\n    };\n\n    this.componentWillReceiveProps = nextprops => {\n      if (this.props.ship !== null && nextprops.ship !== null) {\n        if (this.props.ship.AIS.NAME !== nextprops.ship.AIS.NAME) {\n          this.setState({\n            currentSelectName: 'None'\n          });\n        }\n      } else {\n        this.setState({\n          currentSelectName: 'None'\n        });\n        this.isCalendarSeleced = false;\n      }\n\n      if (this.props !== nextprops) {\n        this.updateShipData(nextprops);\n      }\n    };\n\n    this.updateShipData = nextprops => {\n      if (nextprops.ship !== null) {\n        const shipName = nextprops.ship.AIS.NAME;\n        const company = shipCompanyMap[shipName];\n        const logoImg = nextprops.logoMap[company && company.split(' ').join('').toUpperCase()];\n        let foundHoverOnShip = this.filterFromShipDatabase(shipName);\n\n        if (foundHoverOnShip === null) {\n          console.log(\"Did not find match for \", shipName);\n          return null;\n        }\n\n        this.setState({\n          currentShipName: shipName,\n          currentShipImage: foundHoverOnShip.images.fields.file.url,\n          bigImageURL: foundHoverOnShip.images.fields.file.url,\n          currentLogo: logoImg,\n          showCanvas: false\n        });\n      }\n    };\n\n    this.extractCSVHandler = (event, done) => {\n      console.log(\"123\", this.isCalendarSeleced);\n\n      if (this.state.currentSelectName === 'None' && !this.isCalendarSeleced) {\n        alert('Please select a time interval or date range.');\n        done(false);\n      } else if (!this.trajectoryData || this.trajectoryData.length === 0) {\n        alert('No data available in this interval.');\n        done(false);\n      } else {\n        this.setState({\n          trajectoryCSVData: this.trajectoryCSV\n        });\n        done();\n      }\n    };\n\n    this.filterFromShipDatabase = shipName => {\n      let foundHoverOnShip = this.props.shipFromDatabase.filter(ship => shipName.toLowerCase() === ship.name.toLowerCase());\n\n      if (foundHoverOnShip.length === 0) {\n        return null;\n      }\n\n      return foundHoverOnShip[0]; // return the first match\n    };\n\n    this.selectHandler = async event => {\n      const offset = event.target.value;\n      this.setState({\n        currentSelectName: offset\n      });\n\n      if (offset === 'None') {\n        this.setState({\n          showCanvas: false\n        });\n        this.props.setTrajectoryData([], 'white');\n        return null;\n      }\n\n      const response = await fetch('http://localhost:3001/users/vessles/map/latlngdata', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: this.state.currentShipName,\n          offset: offset\n        })\n      });\n      response.json().then(data => this.processShipRangeData(data, 'OffsetSelector')).catch(err => console.log(err));\n    };\n\n    this.processShipRangeData = (data, from) => {\n      const _data = !data ? [] : data.reduce((acc, d) => [...acc, {\n        'lng': d.longitude,\n        'lat': d.latitude,\n        'date': d.date\n      }], []);\n\n      this.trajectoryData = _data;\n\n      if (_data.length === 0) {\n        console.log('No data retrieved!'); // this.setState({ showCanvas: true }); // plot empty chart\n\n        this.props.setTrajectoryData([], this.props.trajectoryColor['no data']);\n        this.trajectoryCSV = [];\n        this.setState({\n          trajectoryCSVData: this.trajectoryCSV\n        });\n        return null;\n      }\n\n      this.trajectoryCSV = this.json2csv.parse(_data);\n      this.setState({\n        trajectoryCSVData: this.trajectoryCSV\n      });\n\n      if (from === 'OffsetSelector') {\n        var color = this.props.trajectoryColor[this.state.currentSelectName];\n      } else if (from === 'DateRangePikcer') {\n        var color = this.props.trajectoryColor['date range'];\n      }\n\n      this.props.setTrajectoryData(_data, color);\n    };\n\n    this.state = {\n      currentShipName: null,\n      currentShipImage: null,\n      bigImageURL: null,\n      currentLogo: null,\n      showCanvas: false,\n      currentSelectName: 'None',\n      trajectoryCSVData: []\n    };\n    this.json2csv = new Parser();\n    this.trajectoryCSV = []; // for intermediate use to avoid blank file event state has been changed\n\n    this.trajectoryData = [];\n    this.isCalendarSeleced = false;\n    this.updateShipData(this.props);\n  }\n\n  render() {\n    if (this.state.currentShipName === null) {\n      // console.log(\"Did not found match!!!\")\n      return null;\n    }\n\n    if (this.props.show) {\n      const shipName = this.state.currentShipName;\n      const logoImage = this.state.currentLogo;\n      const largeImage = this.state.currentShipImage;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"infowindow\",\n        onMouseOver: this.props.keepInfoWindow,\n        onMouseLeave: this.props.closeInfoWindow,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"infowindow-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: logoImage,\n        alt: \"Logo\",\n        width: \"20px\",\n        height: \"20px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      }), \" \", \"     \", \" \", shipName), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"infowindow-img\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        width: \"170px\",\n        height: \"120px\",\n        src: largeImage,\n        alt: \"shipImage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"infowindow-footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"infowindow-p\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }\n      }, \"Latitude: \", this.props.ship.AIS.LATITUDE), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }\n      }, \"Longitude: \", this.props.ship.AIS.LONGITUDE)), /*#__PURE__*/React.createElement(\"select\", {\n        className: \"infowindow-select\",\n        value: this.state.currentSelectName,\n        onChange: this.selectHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"None\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 29\n        }\n      }, \"None\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"1 hour\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }\n      }, \"1 hour\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"6 hours\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }\n      }, \"6 hours\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"12 hours\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 29\n        }\n      }, \"12 hours\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"1 day\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 29\n        }\n      }, \"1 day\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"2 days\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 29\n        }\n      }, \"2 days\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"3 days\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }\n      }, \"3 days\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"4 days\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }\n      }, \"4 days\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"5 days\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }\n      }, \"5 days\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"6 days\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 29\n        }\n      }, \"6 days\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"1 week\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 29\n        }\n      }, \"1 week\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"1 month\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 29\n        }\n      }, \"1 month\")), /*#__PURE__*/React.createElement(CSVLink, {\n        data: this.state.trajectoryCSVData,\n        className: \"infowindow-button\",\n        filename: this.props.ship.AIS.NAME,\n        target: \"_blank\",\n        onClick: this.extractCSVHandler,\n        asyncOnClick: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }\n      }, \"Extract CSV\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(DateRangePickerWrapper, {\n        currentShipName: this.state.currentShipName,\n        setTrajectoryData: this.props.setTrajectoryData,\n        processShipRangeData: this.processShipRangeData,\n        changeCalendarSelected: this.changeCalendarSelected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 29\n        }\n      }))));\n    } else {\n      return null;\n    }\n  }\n\n} // class SmallMap extends Component {\n//     static defaultProps = {\n//         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBm59I3P5VB3JR25MWz-GKgf4PZs8XEsqc?v=3.exp&libraries=geometry,drawing,places\",\n//     }\n//     constructor(props) {\n//         super(props);\n//     }\n//     CMap = withGoogleMap(props => {\n//         console.log(\"1234\", props);\n//         const latlng = props.children.props.path \n//         return (<GoogleMap\n//             defaultZoom={9}\n//             defaultCenter={{ \n//                 lat: (latlng[0].lat + latlng[latlng.length-1].lat) / 2, \n//                 lng: (latlng[0].lng + latlng[latlng.length-1].lng) / 2 }}\n//         >\n//             {props.children}\n//         </GoogleMap>)}\n//     );\n//     render = () => {\n//         return (\n//             <Fragment>\n//                 <this.CMap\n//                     googleMapURL={this.props.googleMapURL}\n//                     loadingElement={<div style={{ height: `100%` }} />}\n//                     containerElement={<div style={{ height: `700px` }} />}\n//                     mapElement={<div style={{ height: `100%` }} />}\n//                 >\n//                     <Polyline\n//                         path={this.props.trajectoryData}\n//                     />\n//                 </this.CMap>\n//             </Fragment>\n//         );\n//     }\n// }\n\nMyInfoWindowWidget.defaultProps = {\n  trajectoryColor: {\n    '1 hour': 'green',\n    '6 hours': 'orange',\n    '12 hours': 'yellow',\n    '1 day': 'cyan',\n    '2 days': 'brown',\n    '3 days': 'red',\n    '4 days': 'purple',\n    '5 days': 'black',\n    '6 days': 'blue',\n    '1 week': 'pink',\n    '1 month': 'darkblue',\n    'date range': 'gray',\n    'no data': 'white'\n  }\n};","map":{"version":3,"sources":["/home/labrat/cashman-integration/client/src/components/MyInfoWindow.js"],"names":["React","Component","shipCompanyMap","Parser","CSVLink","DateRangePickerWrapper","MyInfoWindowWidget","constructor","props","changeCalendarSelected","isSeleced","isCalendarSeleced","componentWillReceiveProps","nextprops","ship","AIS","NAME","setState","currentSelectName","updateShipData","shipName","company","logoImg","logoMap","split","join","toUpperCase","foundHoverOnShip","filterFromShipDatabase","console","log","currentShipName","currentShipImage","images","fields","file","url","bigImageURL","currentLogo","showCanvas","extractCSVHandler","event","done","state","alert","trajectoryData","length","trajectoryCSVData","trajectoryCSV","shipFromDatabase","filter","toLowerCase","name","selectHandler","offset","target","value","setTrajectoryData","response","fetch","method","headers","body","JSON","stringify","json","then","data","processShipRangeData","catch","err","from","_data","reduce","acc","d","longitude","latitude","date","trajectoryColor","json2csv","parse","color","render","show","logoImage","largeImage","keepInfoWindow","closeInfoWindow","LATITUDE","LONGITUDE","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA+B,2BAA/B,C,CACA;AACA;;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,+BAAP,C,CACA;;AACA,OAAOC,sBAAP,MAAmC,4BAAnC;AAEA,OAAO,MAAMC,kBAAN,SAAiCL,SAAjC,CAA2C;AAmB9CM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAmBnBC,sBAnBmB,GAmBOC,SAAD,IAAe;AACpC,WAAKC,iBAAL,GAAyBD,SAAzB;AACH,KArBkB;;AAAA,SAuBnBE,yBAvBmB,GAuBUC,SAAD,IAAe;AACvC,UAAI,KAAKL,KAAL,CAAWM,IAAX,KAAoB,IAApB,IAA4BD,SAAS,CAACC,IAAV,KAAmB,IAAnD,EAAyD;AACrD,YAAI,KAAKN,KAAL,CAAWM,IAAX,CAAgBC,GAAhB,CAAoBC,IAApB,KAA6BH,SAAS,CAACC,IAAV,CAAeC,GAAf,CAAmBC,IAApD,EAA0D;AACtD,eAAKC,QAAL,CAAc;AAACC,YAAAA,iBAAiB,EAAE;AAApB,WAAd;AACH;AACJ,OAJD,MAIO;AACH,aAAKD,QAAL,CAAc;AAACC,UAAAA,iBAAiB,EAAE;AAApB,SAAd;AACA,aAAKP,iBAAL,GAAyB,KAAzB;AACH;;AACD,UAAI,KAAKH,KAAL,KAAeK,SAAnB,EAA8B;AAC1B,aAAKM,cAAL,CAAoBN,SAApB;AACH;AACJ,KAnCkB;;AAAA,SAqCnBM,cArCmB,GAqCDN,SAAD,IAAe;AAC5B,UAAIA,SAAS,CAACC,IAAV,KAAmB,IAAvB,EAA6B;AACzB,cAAMM,QAAQ,GAAGP,SAAS,CAACC,IAAV,CAAeC,GAAf,CAAmBC,IAApC;AACA,cAAMK,OAAO,GAAGnB,cAAc,CAACkB,QAAD,CAA9B;AACA,cAAME,OAAO,GAAGT,SAAS,CAACU,OAAV,CAAkBF,OAAO,IAAIA,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmBC,IAAnB,CAAwB,EAAxB,EAA4BC,WAA5B,EAA7B,CAAhB;AACA,YAAIC,gBAAgB,GAAG,KAAKC,sBAAL,CAA4BR,QAA5B,CAAvB;;AACA,YAAIO,gBAAgB,KAAK,IAAzB,EAA+B;AAC3BE,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCV,QAAvC;AACA,iBAAO,IAAP;AACH;;AACD,aAAKH,QAAL,CAAc;AACVc,UAAAA,eAAe,EAAEX,QADP;AAEVY,UAAAA,gBAAgB,EAAEL,gBAAgB,CAACM,MAAjB,CAAwBC,MAAxB,CAA+BC,IAA/B,CAAoCC,GAF5C;AAGVC,UAAAA,WAAW,EAAEV,gBAAgB,CAACM,MAAjB,CAAwBC,MAAxB,CAA+BC,IAA/B,CAAoCC,GAHvC;AAIVE,UAAAA,WAAW,EAAEhB,OAJH;AAKViB,UAAAA,UAAU,EAAE;AALF,SAAd;AAOH;AACJ,KAvDkB;;AAAA,SAyDnBC,iBAzDmB,GAyDC,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACjCb,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB,KAAKnB,iBAAxB;;AACA,UAAI,KAAKgC,KAAL,CAAWzB,iBAAX,KAAiC,MAAjC,IAA2C,CAAC,KAAKP,iBAArD,EAAwE;AACpEiC,QAAAA,KAAK,CAAC,8CAAD,CAAL;AACAF,QAAAA,IAAI,CAAC,KAAD,CAAJ;AACH,OAHD,MAGO,IAAI,CAAC,KAAKG,cAAN,IAAwB,KAAKA,cAAL,CAAoBC,MAApB,KAA+B,CAA3D,EAA8D;AACjEF,QAAAA,KAAK,CAAC,qCAAD,CAAL;AACAF,QAAAA,IAAI,CAAC,KAAD,CAAJ;AACH,OAHM,MAGA;AACH,aAAKzB,QAAL,CAAc;AAAC8B,UAAAA,iBAAiB,EAAE,KAAKC;AAAzB,SAAd;AACAN,QAAAA,IAAI;AACP;AACJ,KArEkB;;AAAA,SAuEnBd,sBAvEmB,GAuEOR,QAAD,IAAc;AACnC,UAAIO,gBAAgB,GAAG,KAAKnB,KAAL,CAAWyC,gBAAX,CAA4BC,MAA5B,CAClBpC,IAAD,IAAUM,QAAQ,CAAC+B,WAAT,OAA2BrC,IAAI,CAACsC,IAAL,CAAUD,WAAV,EADlB,CAAvB;;AAEA,UAAIxB,gBAAgB,CAACmB,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B,eAAO,IAAP;AACH;;AACD,aAAOnB,gBAAgB,CAAC,CAAD,CAAvB,CANmC,CAMR;AAC9B,KA9EkB;;AAAA,SAgFnB0B,aAhFmB,GAgFH,MAAOZ,KAAP,IAAiB;AAC7B,YAAMa,MAAM,GAAGb,KAAK,CAACc,MAAN,CAAaC,KAA5B;AACA,WAAKvC,QAAL,CAAc;AAAEC,QAAAA,iBAAiB,EAAEoC;AAArB,OAAd;;AACA,UAAIA,MAAM,KAAK,MAAf,EAAuB;AACnB,aAAKrC,QAAL,CAAc;AAAEsB,UAAAA,UAAU,EAAE;AAAd,SAAd;AACA,aAAK/B,KAAL,CAAWiD,iBAAX,CAA6B,EAA7B,EAAiC,OAAjC;AACA,eAAO,IAAP;AACH;;AAED,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAD,EAAuD;AAC/EC,QAAAA,MAAM,EAAE,MADuE;AAE/EC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFsE;AAG/EC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBZ,UAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWZ,eADA;AAEjBuB,UAAAA,MAAM,EAAEA;AAFS,SAAf;AAHyE,OAAvD,CAA5B;AASAI,MAAAA,QAAQ,CAACO,IAAT,GAAgBC,IAAhB,CAAsBC,IAAD,IAAU,KAAKC,oBAAL,CAA0BD,IAA1B,EAAgC,gBAAhC,CAA/B,EAAkFE,KAAlF,CAAwFC,GAAG,IAAIzC,OAAO,CAACC,GAAR,CAAYwC,GAAZ,CAA/F;AACH,KAnGkB;;AAAA,SAqGnBF,oBArGmB,GAqGI,CAACD,IAAD,EAAOI,IAAP,KAAgB;AACnC,YAAMC,KAAK,GAAI,CAACL,IAAF,GAAU,EAAV,GAAeA,IAAI,CAACM,MAAL,CAAY,CAACC,GAAD,EAAMC,CAAN,KAAY,CAAC,GAAGD,GAAJ,EAAS;AAAC,eAAOC,CAAC,CAACC,SAAV;AAAqB,eAAOD,CAAC,CAACE,QAA9B;AAAwC,gBAAQF,CAAC,CAACG;AAAlD,OAAT,CAAxB,EAA2F,EAA3F,CAA7B;;AACA,WAAKjC,cAAL,GAAsB2B,KAAtB;;AACA,UAAIA,KAAK,CAAC1B,MAAN,KAAiB,CAArB,EAAwB;AACpBjB,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EADoB,CAEpB;;AACA,aAAKtB,KAAL,CAAWiD,iBAAX,CAA6B,EAA7B,EAAiC,KAAKjD,KAAL,CAAWuE,eAAX,CAA2B,SAA3B,CAAjC;AACA,aAAK/B,aAAL,GAAqB,EAArB;AACA,aAAK/B,QAAL,CAAc;AAAC8B,UAAAA,iBAAiB,EAAE,KAAKC;AAAzB,SAAd;AACA,eAAO,IAAP;AACH;;AACD,WAAKA,aAAL,GAAqB,KAAKgC,QAAL,CAAcC,KAAd,CAAoBT,KAApB,CAArB;AACA,WAAKvD,QAAL,CAAc;AAAC8B,QAAAA,iBAAiB,EAAE,KAAKC;AAAzB,OAAd;;AAEA,UAAIuB,IAAI,KAAK,gBAAb,EAA+B;AAC3B,YAAIW,KAAK,GAAG,KAAK1E,KAAL,CAAWuE,eAAX,CAA2B,KAAKpC,KAAL,CAAWzB,iBAAtC,CAAZ;AACH,OAFD,MAEO,IAAIqD,IAAI,KAAK,iBAAb,EAAgC;AACnC,YAAIW,KAAK,GAAG,KAAK1E,KAAL,CAAWuE,eAAX,CAA2B,YAA3B,CAAZ;AACH;;AACD,WAAKvE,KAAL,CAAWiD,iBAAX,CAA6Be,KAA7B,EAAoCU,KAApC;AACH,KAzHkB;;AAGf,SAAKvC,KAAL,GAAa;AACTZ,MAAAA,eAAe,EAAE,IADR;AAETC,MAAAA,gBAAgB,EAAE,IAFT;AAGTK,MAAAA,WAAW,EAAE,IAHJ;AAITC,MAAAA,WAAW,EAAE,IAJJ;AAKTC,MAAAA,UAAU,EAAE,KALH;AAMTrB,MAAAA,iBAAiB,EAAE,MANV;AAOT6B,MAAAA,iBAAiB,EAAE;AAPV,KAAb;AASA,SAAKiC,QAAL,GAAgB,IAAI7E,MAAJ,EAAhB;AACA,SAAK6C,aAAL,GAAqB,EAArB,CAbe,CAaU;;AACzB,SAAKH,cAAL,GAAsB,EAAtB;AACA,SAAKlC,iBAAL,GAAyB,KAAzB;AACA,SAAKQ,cAAL,CAAoB,KAAKX,KAAzB;AACH;;AA0GD2E,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKxC,KAAL,CAAWZ,eAAX,KAA+B,IAAnC,EAAyC;AACrC;AACA,aAAO,IAAP;AACH;;AACD,QAAI,KAAKvB,KAAL,CAAW4E,IAAf,EAAqB;AACjB,YAAMhE,QAAQ,GAAG,KAAKuB,KAAL,CAAWZ,eAA5B;AACA,YAAMsD,SAAS,GAAG,KAAK1C,KAAL,CAAWL,WAA7B;AACA,YAAMgD,UAAU,GAAG,KAAK3C,KAAL,CAAWX,gBAA9B;AACA,0BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,WAAW,EAAE,KAAKxB,KAAL,CAAW+E,cAApD;AAAoE,QAAA,YAAY,EAAE,KAAK/E,KAAL,CAAWgF,eAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,GAAG,EAAEH,SAAV;AAAqB,QAAA,GAAG,EAAC,MAAzB;AAAgC,QAAA,KAAK,EAAC,MAAtC;AAA6C,QAAA,MAAM,EAAG,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,OACoE,OADpE,OAC8EjE,QAD9E,CADJ,eAII;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,KAAK,EAAC,OAAX;AAAmB,QAAA,MAAM,EAAC,OAA1B;AACI,QAAA,GAAG,EAAEkE,UADT;AAEI,QAAA,GAAG,EAAC,WAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAJJ,eASI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAc,KAAK9E,KAAL,CAAWM,IAAX,CAAgBC,GAAhB,CAAoB0E,QAAlC,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAe,KAAKjF,KAAL,CAAWM,IAAX,CAAgBC,GAAhB,CAAoB2E,SAAnC,CAFJ,CADJ,eAKI;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAsC,QAAA,KAAK,EAAE,KAAK/C,KAAL,CAAWzB,iBAAxD;AAA2E,QAAA,QAAQ,EAAE,KAAKmC,aAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHJ,eAII;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAQ,QAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,eAMI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,eAOI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ,eAQI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,eASI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ,eAUI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,eAWI;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXJ,eAYI;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAZJ,CALJ,eAmBI,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE,KAAKV,KAAL,CAAWI,iBAA1B;AAA6C,QAAA,SAAS,EAAC,mBAAvD;AACI,QAAA,QAAQ,EAAE,KAAKvC,KAAL,CAAWM,IAAX,CAAgBC,GAAhB,CAAoBC,IADlC;AACwC,QAAA,MAAM,EAAC,QAD/C;AACwD,QAAA,OAAO,EAAE,KAAKwB,iBADtE;AACyF,QAAA,YAAY,EAAE,IADvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAnBJ,eAuBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,sBAAD;AACI,QAAA,eAAe,EAAE,KAAKG,KAAL,CAAWZ,eADhC;AAEI,QAAA,iBAAiB,EAAE,KAAKvB,KAAL,CAAWiD,iBAFlC;AAGI,QAAA,oBAAoB,EAAE,KAAKW,oBAH/B;AAII,QAAA,sBAAsB,EAAE,KAAK3D,sBAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAvBJ,CATJ,CADJ;AA8CH,KAlDD,MAmDK;AACD,aAAO,IAAP;AACH;AACJ;;AAzM6C,C,CA4MlD;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlPaH,kB,CACFqF,Y,GAAe;AAClBZ,EAAAA,eAAe,EAAE;AACb,cAAU,OADG;AAEb,eAAW,QAFE;AAGb,gBAAY,QAHC;AAIb,aAAS,MAJI;AAKb,cAAU,OALG;AAMb,cAAU,KANG;AAOb,cAAU,QAPG;AAQb,cAAU,OARG;AASb,cAAU,MATG;AAUb,cAAU,MAVG;AAWb,eAAW,UAXE;AAYb,kBAAc,MAZD;AAab,eAAW;AAbE;AADC,C","sourcesContent":["import React, { Component } from 'react';\nimport { shipCompanyMap } from \"../components/ShipTracker\"\n// import Chart from 'chart.js'\n// import { withGoogleMap, GoogleMap, Polyline  } from 'react-google-maps'\nimport { Parser } from 'json2csv'\nimport { CSVLink } from \"react-csv\"\nimport '../components/ShipTracker.css';\n// import { DatePicker } from '../components/DatePicker';\nimport DateRangePickerWrapper from \"../components/MyDatePicker\"\n\nexport class MyInfoWindowWidget extends Component {\n    static defaultProps = {\n        trajectoryColor: {\n            '1 hour': 'green',\n            '6 hours': 'orange',\n            '12 hours': 'yellow',\n            '1 day': 'cyan',\n            '2 days': 'brown',\n            '3 days': 'red',\n            '4 days': 'purple',\n            '5 days': 'black',\n            '6 days': 'blue',\n            '1 week': 'pink',\n            '1 month': 'darkblue',\n            'date range': 'gray',\n            'no data': 'white',\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentShipName: null,\n            currentShipImage: null,\n            bigImageURL: null,\n            currentLogo: null,\n            showCanvas: false,\n            currentSelectName: 'None',\n            trajectoryCSVData: [],\n        };\n        this.json2csv = new Parser();\n        this.trajectoryCSV = []; // for intermediate use to avoid blank file event state has been changed\n        this.trajectoryData = [];\n        this.isCalendarSeleced = false;\n        this.updateShipData(this.props);    \n    }\n\n    changeCalendarSelected = (isSeleced) => {\n        this.isCalendarSeleced = isSeleced;\n    }\n\n    componentWillReceiveProps = (nextprops) => {\n        if (this.props.ship !== null && nextprops.ship !== null) {\n            if (this.props.ship.AIS.NAME !== nextprops.ship.AIS.NAME) {\n                this.setState({currentSelectName: 'None'})\n            }\n        } else {\n            this.setState({currentSelectName: 'None'})\n            this.isCalendarSeleced = false;\n        }\n        if (this.props !== nextprops) {\n            this.updateShipData(nextprops);\n        }\n    }\n\n    updateShipData = (nextprops) => {\n        if (nextprops.ship !== null) {\n            const shipName = nextprops.ship.AIS.NAME;\n            const company = shipCompanyMap[shipName];\n            const logoImg = nextprops.logoMap[company && company.split(' ').join('').toUpperCase()];\n            let foundHoverOnShip = this.filterFromShipDatabase(shipName)\n            if (foundHoverOnShip === null) {\n                console.log(\"Did not find match for \", shipName)\n                return null\n            }\n            this.setState({ \n                currentShipName: shipName, \n                currentShipImage: foundHoverOnShip.images.fields.file.url,\n                bigImageURL: foundHoverOnShip.images.fields.file.url,\n                currentLogo: logoImg,\n                showCanvas: false,\n            })\n        }\n    }\n\n    extractCSVHandler = (event, done) => {\n        console.log(\"123\", this.isCalendarSeleced);\n        if (this.state.currentSelectName === 'None' && !this.isCalendarSeleced) {\n            alert('Please select a time interval or date range.')\n            done(false);\n        } else if (!this.trajectoryData || this.trajectoryData.length === 0) {\n            alert('No data available in this interval.')\n            done(false);\n        } else {\n            this.setState({trajectoryCSVData: this.trajectoryCSV});\n            done();\n        }\n    }\n\n    filterFromShipDatabase = (shipName) => {\n        let foundHoverOnShip = this.props.shipFromDatabase.filter(\n            (ship) => shipName.toLowerCase() === ship.name.toLowerCase());\n        if (foundHoverOnShip.length === 0) {\n            return null\n        }\n        return foundHoverOnShip[0] // return the first match\n    }\n\n    selectHandler = async (event) => {\n        const offset = event.target.value;\n        this.setState({ currentSelectName: offset })\n        if (offset === 'None') {\n            this.setState({ showCanvas: false })\n            this.props.setTrajectoryData([], 'white');\n            return null;\n        }\n\n        const response = await fetch('http://localhost:3001/users/vessles/map/latlngdata', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                name: this.state.currentShipName,\n                offset: offset,\n            }),\n        });\n\n        response.json().then((data) => this.processShipRangeData(data, 'OffsetSelector')).catch(err => console.log(err))\n    }\n\n    processShipRangeData = (data, from) => {\n        const _data = (!data) ? [] : data.reduce((acc, d) => [...acc, {'lng': d.longitude, 'lat': d.latitude, 'date': d.date}], []);\n        this.trajectoryData = _data;\n        if (_data.length === 0) {\n            console.log('No data retrieved!');\n            // this.setState({ showCanvas: true }); // plot empty chart\n            this.props.setTrajectoryData([], this.props.trajectoryColor['no data']);\n            this.trajectoryCSV = [];\n            this.setState({trajectoryCSVData: this.trajectoryCSV})\n            return null;\n        }\n        this.trajectoryCSV = this.json2csv.parse(_data)\n        this.setState({trajectoryCSVData: this.trajectoryCSV})\n\n        if (from === 'OffsetSelector') {\n            var color = this.props.trajectoryColor[this.state.currentSelectName];\n        } else if (from === 'DateRangePikcer') {\n            var color = this.props.trajectoryColor['date range'];\n        }\n        this.props.setTrajectoryData(_data, color);\n    }\n\n    render() {\n        if (this.state.currentShipName === null) {\n            // console.log(\"Did not found match!!!\")\n            return null\n        }\n        if (this.props.show) {\n            const shipName = this.state.currentShipName;\n            const logoImage = this.state.currentLogo;\n            const largeImage = this.state.currentShipImage;\n            return (\n                <div className='infowindow' onMouseOver={this.props.keepInfoWindow} onMouseLeave={this.props.closeInfoWindow} >\n                    <div className='infowindow-header'>\n                        <img src={logoImage} alt=\"Logo\" width=\"20px\" height = \"20px\"/> {\"     \"} {shipName}\n                    </div>\n                    <div className='infowindow-img'>\n                        <img width=\"170px\" height=\"120px\"\n                            src={largeImage}\n                            alt=\"shipImage\"/>    \n                    </div>\n                    <div className='infowindow-footer'>\n                        <div className='infowindow-p'>\n                            <p>Latitude: {this.props.ship.AIS.LATITUDE}</p>\n                            <p>Longitude: {this.props.ship.AIS.LONGITUDE}</p>\n                        </div>\n                        <select className='infowindow-select' value={this.state.currentSelectName} onChange={this.selectHandler}>\n                            <option value='None'>None</option>\n                            <option value='1 hour'>1 hour</option>\n                            <option value='6 hours'>6 hours</option>\n                            <option value='12 hours'>12 hours</option>\n                            <option value='1 day'>1 day</option>\n                            <option value='2 days'>2 days</option>\n                            <option value='3 days'>3 days</option>\n                            <option value='4 days'>4 days</option>\n                            <option value='5 days'>5 days</option>\n                            <option value='6 days'>6 days</option>\n                            <option value='1 week'>1 week</option>\n                            <option value='1 month'>1 month</option>\n                        </select>\n                        <CSVLink data={this.state.trajectoryCSVData} className='infowindow-button' \n                            filename={this.props.ship.AIS.NAME} target=\"_blank\" onClick={this.extractCSVHandler} asyncOnClick={true}>\n                            Extract CSV\n                        </CSVLink>\n                        <div>\n                            <DateRangePickerWrapper\n                                currentShipName={this.state.currentShipName}\n                                setTrajectoryData={this.props.setTrajectoryData}\n                                processShipRangeData={this.processShipRangeData}\n                                changeCalendarSelected={this.changeCalendarSelected}\n                            />\n                        </div>\n                    </div>\n\n                  \n                </div>\n            );\n        }\n        else {\n            return null;\n        }\n    }\n}\n\n// class SmallMap extends Component {\n//     static defaultProps = {\n//         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBm59I3P5VB3JR25MWz-GKgf4PZs8XEsqc?v=3.exp&libraries=geometry,drawing,places\",\n//     }\n\n//     constructor(props) {\n//         super(props);\n//     }\n\n//     CMap = withGoogleMap(props => {\n//         console.log(\"1234\", props);\n//         const latlng = props.children.props.path \n//         return (<GoogleMap\n//             defaultZoom={9}\n//             defaultCenter={{ \n//                 lat: (latlng[0].lat + latlng[latlng.length-1].lat) / 2, \n//                 lng: (latlng[0].lng + latlng[latlng.length-1].lng) / 2 }}\n//         >\n//             {props.children}\n//         </GoogleMap>)}\n//     );\n\n//     render = () => {\n//         return (\n//             <Fragment>\n//                 <this.CMap\n//                     googleMapURL={this.props.googleMapURL}\n//                     loadingElement={<div style={{ height: `100%` }} />}\n//                     containerElement={<div style={{ height: `700px` }} />}\n//                     mapElement={<div style={{ height: `100%` }} />}\n//                 >\n//                     <Polyline\n//                         path={this.props.trajectoryData}\n//                     />\n//                 </this.CMap>\n//             </Fragment>\n//         );\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}