{"ast":null,"code":"import { Component } from 'react';\nexport default class Polyline extends Component {\n  renderPolylines() {\n    const {\n      markers,\n      map,\n      maps,\n      lineColor\n    } = this.props;\n    /** Example of rendering geodesic polyline */\n\n    let geodesicPolyline = new maps.Polyline({\n      path: markers,\n      geodesic: true,\n      strokeColor: lineColor,\n      strokeOpacity: 1.0,\n      strokeWeight: 4\n    });\n\n    if (markers.length !== 0) {\n      geodesicPolyline.setMap(map);\n    } else {\n      geodesicPolyline.setMap(null);\n    }\n    /** Example of rendering non geodesic polyline (straight line) */\n\n\n    let nonGeodesicPolyline = new maps.Polyline({\n      path: markers,\n      geodesic: false,\n      strokeColor: lineColor,\n      strokeOpacity: 0.7,\n      strokeWeight: 3\n    });\n\n    if (markers.length !== 0) {\n      nonGeodesicPolyline.setMap(map);\n    } else {\n      nonGeodesicPolyline.setMap(null);\n    }\n  }\n\n  render() {\n    this.renderPolylines();\n    return null;\n  }\n\n}","map":{"version":3,"sources":["/home/labrat/Desktop/boat-landing-page-sample/client/src/components/Polyline.js"],"names":["Component","Polyline","renderPolylines","markers","map","maps","lineColor","props","geodesicPolyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","length","setMap","nonGeodesicPolyline","render"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,eAAe,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAC9CE,EAAAA,eAAe,GAAI;AACb,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,GAAX;AAAgBC,MAAAA,IAAhB;AAAsBC,MAAAA;AAAtB,QAAoC,KAAKC,KAA/C;AAEA;;AACA,QAAIC,gBAAgB,GAAG,IAAIH,IAAI,CAACJ,QAAT,CAAkB;AACrCQ,MAAAA,IAAI,EAAEN,OAD+B;AAErCO,MAAAA,QAAQ,EAAE,IAF2B;AAGrCC,MAAAA,WAAW,EAAEL,SAHwB;AAIrCM,MAAAA,aAAa,EAAE,GAJsB;AAKrCC,MAAAA,YAAY,EAAE;AALuB,KAAlB,CAAvB;;AAOA,QAAIV,OAAO,CAACW,MAAR,KAAmB,CAAvB,EAA0B;AACtBN,MAAAA,gBAAgB,CAACO,MAAjB,CAAwBX,GAAxB;AACH,KAFD,MAEO;AACHI,MAAAA,gBAAgB,CAACO,MAAjB,CAAwB,IAAxB;AACH;AAED;;;AACA,QAAIC,mBAAmB,GAAG,IAAIX,IAAI,CAACJ,QAAT,CAAkB;AACxCQ,MAAAA,IAAI,EAAEN,OADkC;AAExCO,MAAAA,QAAQ,EAAE,KAF8B;AAGxCC,MAAAA,WAAW,EAAEL,SAH2B;AAIxCM,MAAAA,aAAa,EAAE,GAJyB;AAKxCC,MAAAA,YAAY,EAAE;AAL0B,KAAlB,CAA1B;;AAOA,QAAIV,OAAO,CAACW,MAAR,KAAmB,CAAvB,EAA0B;AACtBE,MAAAA,mBAAmB,CAACD,MAApB,CAA2BX,GAA3B;AACH,KAFD,MAEO;AACHY,MAAAA,mBAAmB,CAACD,MAApB,CAA2B,IAA3B;AACH;AACJ;;AAEDE,EAAAA,MAAM,GAAI;AACN,SAAKf,eAAL;AACA,WAAO,IAAP;AACH;;AApC2C","sourcesContent":["import { Component } from 'react'\n\nexport default class Polyline extends Component {\n  renderPolylines () {\n        const { markers, map, maps, lineColor } = this.props\n\n        /** Example of rendering geodesic polyline */\n        let geodesicPolyline = new maps.Polyline({\n            path: markers,\n            geodesic: true,\n            strokeColor: lineColor,\n            strokeOpacity: 1.0,\n            strokeWeight: 4\n        })\n        if (markers.length !== 0) {\n            geodesicPolyline.setMap(map);\n        } else {\n            geodesicPolyline.setMap(null);\n        }\n\n        /** Example of rendering non geodesic polyline (straight line) */\n        let nonGeodesicPolyline = new maps.Polyline({\n            path: markers,\n            geodesic: false,\n            strokeColor: lineColor,\n            strokeOpacity: 0.7,\n            strokeWeight: 3\n        })\n        if (markers.length !== 0) {\n            nonGeodesicPolyline.setMap(map);\n        } else {\n            nonGeodesicPolyline.setMap(null);\n        }\n    }\n\n    render () {\n        this.renderPolylines()\n        return null\n    }\n}"]},"metadata":{},"sourceType":"module"}