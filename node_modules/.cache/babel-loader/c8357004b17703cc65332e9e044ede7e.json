{"ast":null,"code":"var _jsxFileName = \"/home/labrat/cashman-integration/client/src/context.js\";\nimport React, { Component } from 'react'; // import items from \"./data\";\n\nimport Client from './Contentful'; // Client.getEntries({\n//     content_type: \"cashmanVesselTracker\"\n// }).then(response => console.log(response.items));\n\nconst VesselContext = React.createContext(); //\n\nclass VesselProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      vessels: [],\n      sortedVessels: [],\n      featuredVessels: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: 'cashmanVesselTracker'\n        });\n        let vessels = this.formatData(response.items);\n        let featuredVessels = vessels.filter(vessel => vessel.featured === true);\n        let maxPrice = Math.max(...vessels.map(item => item.price));\n        let maxSize = Math.max(...vessels.map(item => item.size));\n        this.setState({\n          vessels,\n          featuredVessels,\n          sortedVessels: vessels,\n          loading: false,\n          price: maxPrice,\n          maxPrice,\n          maxSize\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getVessel = slug => {\n      let tempVessels = [...this.state.vessels];\n      const vessel = tempVessels.find(vessel => vessel.slug === slug);\n      return vessel;\n    };\n\n    this.handleChange = event => {\n      // We have to do this because we wanted to have the checkbox\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterVessels // This is a callback function\n      );\n    };\n\n    this.filterVessels = () => {\n      let {\n        vessels,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state; // all the rooms\n\n      let tempVessles = [...vessels]; // transform values\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // So, if the value for the type, is anything but all, then I do wanna filter it.\n      // than I do wanna return the vessels that in fact are matching the vessel type I am passing\n      // Filter by type\n\n      if (type !== 'all') {\n        tempVessles = tempVessles.filter(vessel => vessel.type === type);\n      } // Filter by capacity\n\n\n      if (capacity !== 1) {\n        tempVessles = tempVessles.filter(vessel => vessel.capacity >= capacity);\n      } // Filter by price (or cost of project) : ossia: if we change the price we would like to change\n      // the vessels accordingly\n\n\n      tempVessles = tempVessles.filter(vessel => vessel.price <= price); // Filter by size of the vessel\n\n      tempVessles = tempVessles.filter(vessel => vessel.size >= minSize && vessel.size <= maxSize); // Filter by breackfast\n\n      if (breakfast) {\n        tempVessles = tempVessles.filter(vessel => vessel.breakfast === true);\n      } // Filter by pets\n\n\n      if (pets) {\n        tempVessles = tempVessles.filter(vessel => vessel.pets === true);\n      } // Change state\n\n\n      this.setState({\n        sortedVessels: tempVessles\n      });\n    };\n  }\n\n  // For local data (uncomment to use local data)\n  // componentDidMount() {\n  //     let vessels = this.formatData(items);\n  //     let featuredVessels = vessels.filter(vessel => vessel.featured === true);\n  //     let maxPrice = Math.max(...vessels.map(item => item.price));\n  //     let maxSize = Math.max(...vessels.map(item => item.size));\n  //     this.setState({\n  //         vessels,\n  //         featuredVessels,\n  //         sortedVessels:vessels,\n  //         loading: false,\n  //         price: maxPrice,\n  //         maxPrice,\n  //         maxSize\n  //     })\n  // }\n  // For Contentful database data\n  componentDidMount() {\n    this.getData();\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let vessel = { ...item.fields,\n        images: images,\n        id\n      };\n      return vessel;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(VesselContext.Provider, {\n      value: { ...this.state,\n        getVessel: this.getVessel,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 4\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst VesselConsumer = VesselContext.Consumer;\nexport function withVesselConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(VesselConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 10\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 38\n      }\n    })));\n  };\n}\nexport { VesselProvider, VesselConsumer, VesselContext };","map":{"version":3,"sources":["/home/labrat/cashman-integration/client/src/context.js"],"names":["React","Component","Client","VesselContext","createContext","VesselProvider","state","vessels","sortedVessels","featuredVessels","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getData","response","getEntries","content_type","formatData","items","filter","vessel","featured","Math","max","map","item","size","setState","error","console","log","getVessel","slug","tempVessels","find","handleChange","event","target","value","checked","name","filterVessels","tempVessles","parseInt","componentDidMount","tempItems","id","sys","images","fields","image","file","url","render","props","children","VesselConsumer","Consumer","withVesselConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import items from \"./data\";\nimport Client from './Contentful';\n\n// Client.getEntries({\n//     content_type: \"cashmanVesselTracker\"\n// }).then(response => console.log(response.items));\n\nconst VesselContext = React.createContext();\n//\n\nclass VesselProvider extends Component {\n\tstate = {\n\t\tvessels: [],\n\t\tsortedVessels: [],\n\t\tfeaturedVessels: [],\n\t\tloading: true,\n\t\ttype: 'all',\n\t\tcapacity: 1,\n\t\tprice: 0,\n\t\tminPrice: 0,\n\t\tmaxPrice: 0,\n\t\tminSize: 0,\n\t\tmaxSize: 0,\n\t\tbreakfast: false,\n\t\tpets: false\n\t};\n\n\t// getData{}\n\tgetData = async () => {\n\t\ttry {\n\t\t\tlet response = await Client.getEntries({\n\t\t\t\tcontent_type: 'cashmanVesselTracker'\n\t\t\t});\n\t\t\tlet vessels = this.formatData(response.items);\n\t\t\tlet featuredVessels = vessels.filter((vessel) => vessel.featured === true);\n\n\t\t\tlet maxPrice = Math.max(...vessels.map((item) => item.price));\n\t\t\tlet maxSize = Math.max(...vessels.map((item) => item.size));\n\n\t\t\tthis.setState({\n\t\t\t\tvessels,\n\t\t\t\tfeaturedVessels,\n\t\t\t\tsortedVessels: vessels,\n\t\t\t\tloading: false,\n\t\t\t\tprice: maxPrice,\n\t\t\t\tmaxPrice,\n\t\t\t\tmaxSize\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\t// For local data (uncomment to use local data)\n\t// componentDidMount() {\n\t//     let vessels = this.formatData(items);\n\t//     let featuredVessels = vessels.filter(vessel => vessel.featured === true);\n\n\t//     let maxPrice = Math.max(...vessels.map(item => item.price));\n\t//     let maxSize = Math.max(...vessels.map(item => item.size));\n\n\t//     this.setState({\n\t//         vessels,\n\t//         featuredVessels,\n\t//         sortedVessels:vessels,\n\t//         loading: false,\n\t//         price: maxPrice,\n\t//         maxPrice,\n\t//         maxSize\n\t//     })\n\t// }\n\n\t// For Contentful database data\n\tcomponentDidMount() {\n\t\tthis.getData();\n\t}\n\n\tformatData(items) {\n\t\tlet tempItems = items.map((item) => {\n\t\t\tlet id = item.sys.id;\n\t\t\tlet images = item.fields.images.map((image) => image.fields.file.url);\n\n\t\t\tlet vessel = { ...item.fields, images: images, id };\n\n\t\t\treturn vessel;\n\t\t});\n\t\treturn tempItems;\n\t}\n\n\tgetVessel = (slug) => {\n\t\tlet tempVessels = [ ...this.state.vessels ];\n\t\tconst vessel = tempVessels.find((vessel) => vessel.slug === slug);\n\t\treturn vessel;\n\t};\n\n\thandleChange = (event) => {\n\t\t// We have to do this because we wanted to have the checkbox\n\t\tconst target = event.target;\n\t\tconst value = target.type === 'checkbox' ? target.checked : target.value;\n\t\tconst name = event.target.name;\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\t[name]: value\n\t\t\t},\n\t\t\tthis.filterVessels // This is a callback function\n\t\t);\n\t};\n\n\tfilterVessels = () => {\n\t\tlet { vessels, type, capacity, price, minSize, maxSize, breakfast, pets } = this.state;\n\n\t\t// all the rooms\n\t\tlet tempVessles = [ ...vessels ];\n\t\t// transform values\n\t\tcapacity = parseInt(capacity);\n\t\tprice = parseInt(price);\n\n\t\t// So, if the value for the type, is anything but all, then I do wanna filter it.\n\t\t// than I do wanna return the vessels that in fact are matching the vessel type I am passing\n\t\t// Filter by type\n\t\tif (type !== 'all') {\n\t\t\ttempVessles = tempVessles.filter((vessel) => vessel.type === type);\n\t\t}\n\n\t\t// Filter by capacity\n\t\tif (capacity !== 1) {\n\t\t\ttempVessles = tempVessles.filter((vessel) => vessel.capacity >= capacity);\n\t\t}\n\n\t\t// Filter by price (or cost of project) : ossia: if we change the price we would like to change\n\t\t// the vessels accordingly\n\t\ttempVessles = tempVessles.filter((vessel) => vessel.price <= price);\n\n\t\t// Filter by size of the vessel\n\t\ttempVessles = tempVessles.filter((vessel) => vessel.size >= minSize && vessel.size <= maxSize);\n\n\t\t// Filter by breackfast\n\t\tif (breakfast) {\n\t\t\ttempVessles = tempVessles.filter((vessel) => vessel.breakfast === true);\n\t\t}\n\n\t\t// Filter by pets\n\t\tif (pets) {\n\t\t\ttempVessles = tempVessles.filter((vessel) => vessel.pets === true);\n\t\t}\n\n\t\t// Change state\n\t\tthis.setState({\n\t\t\tsortedVessels: tempVessles\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<VesselContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\t...this.state,\n\t\t\t\t\tgetVessel: this.getVessel,\n\t\t\t\t\thandleChange: this.handleChange\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</VesselContext.Provider>\n\t\t);\n\t}\n}\n\nconst VesselConsumer = VesselContext.Consumer;\n\nexport function withVesselConsumer(Component) {\n\treturn function ConsumerWrapper(props) {\n\t\treturn <VesselConsumer>{(value) => <Component {...props} context={value} />}</VesselConsumer>;\n\t};\n}\n\nexport { VesselProvider, VesselConsumer, VesselContext };\n"]},"metadata":{},"sourceType":"module"}