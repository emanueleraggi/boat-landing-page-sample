{"ast":null,"code":"var _jsxFileName = \"/home/labrat/Desktop/boat-landing-page-sample/client/src/components/MyDropDownMenu.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nexport class MyDropDown extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showCheckboxes = e => {\n      let checkboxes = document.getElementById(\"checkboxes\");\n      let boxAll = document.getElementById(\"All\"); // ID: {type.name}\n\n      if (!this.expanded) {\n        this.props.shipTypes.forEach(type => {\n          let currentBox = document.getElementById(type.name);\n          currentBox.checked = false;\n        });\n        boxAll.checked = false;\n        checkboxes.style.display = \"block\";\n        this.expanded = true;\n      } else {\n        checkboxes.style.display = \"none\";\n        this.expanded = false;\n      }\n    };\n\n    this.changeAllCheckBox = e => {\n      let boxAll = document.getElementById(\"All\");\n      this.props.shipTypes.forEach(type => {\n        let currentBox = document.getElementById(type.name);\n        currentBox.checked = boxAll.checked;\n      });\n    };\n\n    this.getCheckedOption = event => {\n      let boxAll = document.getElementById(\"All\");\n\n      if (boxAll.checked === true) {\n        this.props.shipTypes.forEach(type => {\n          let currentBox = document.getElementById(type.name);\n          currentBox.checked = true;\n        });\n        this.props.changeFilteredShips('All');\n      } else {\n        let options = [];\n        this.props.shipTypes.forEach(type => {\n          let currentBox = document.getElementById(type.name);\n\n          if (currentBox.checked === true) {\n            options.push(type.name);\n          }\n        });\n        this.props.changeFilteredShips(options);\n      }\n    };\n\n    this.expanded = false;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState !== this.state) {\n      return true;\n    }\n\n    return !this.props.map && nextProps.map;\n  }\n\n  componentDidMount() {\n    this._render();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this._render();\n  }\n\n  _render() {\n    const {\n      props\n    } = this;\n    if (!props.map || !props.controlPosition) return null;\n    render( /*#__PURE__*/React.createElement(\"form\", {\n      ref: el => {\n        if (!this.renderedOnce) {\n          this.el = el;\n          props.map.controls[props.controlPosition].push(el);\n        } else if (el && this.el && el !== this.el) {\n          this.el.innerHTML = '';\n          [].slice.call(el.childNodes).forEach(child => this.el.appendChild(child));\n        }\n\n        this.renderedOnce = true;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"multiselect\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"selectBox\",\n      onClick: this.showCheckboxes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      className: \"mydropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      selected: true,\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 27\n      }\n    }, \"All\"))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"checkboxes\",\n      onClick: this.getCheckedOption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"All\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"All\",\n      onClick: this.changeAllCheckBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 31\n      }\n    }), \"All\"), this.props.shipTypes.map(type => {\n      return /*#__PURE__*/React.createElement(\"lable\", {\n        for: type.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: type.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 41\n        }\n      }), type.name, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 41\n        }\n      }));\n    })))), document.createElement('div'));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"noscript\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 16\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/labrat/Desktop/boat-landing-page-sample/client/src/components/MyDropDownMenu.js"],"names":["React","Component","render","MyDropDown","constructor","props","showCheckboxes","e","checkboxes","document","getElementById","boxAll","expanded","shipTypes","forEach","type","currentBox","name","checked","style","display","changeAllCheckBox","getCheckedOption","event","changeFilteredShips","options","push","shouldComponentUpdate","nextProps","nextState","state","map","componentDidMount","_render","componentDidUpdate","prevProps","prevState","controlPosition","el","renderedOnce","controls","innerHTML","slice","call","childNodes","child","appendChild","createElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\n\nexport class MyDropDown extends Component {\n    constructor(props) {\n        super(props);\n        this.expanded=false;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState !== this.state) {\n            return true;\n        }\n        return !this.props.map && nextProps.map\n    }\n    \n    componentDidMount() {\n        this._render()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this._render()\n    }\n\n    showCheckboxes = (e) => {\n        let checkboxes = document.getElementById(\"checkboxes\");\n        let boxAll = document.getElementById(\"All\"); // ID: {type.name}\n\n        if (!this.expanded) {\n            this.props.shipTypes.forEach((type) =>{\n                let currentBox =  document.getElementById(type.name);\n                currentBox.checked = false;\n            })\n            boxAll.checked = false;\n            checkboxes.style.display = \"block\";\n            this.expanded = true;\n        } else {\n            checkboxes.style.display = \"none\";\n            this.expanded = false; \n        }\n    }\n\n    changeAllCheckBox = (e) => {\n        let boxAll = document.getElementById(\"All\");\n        this.props.shipTypes.forEach((type) =>{\n            let currentBox =  document.getElementById(type.name);\n            currentBox.checked = boxAll.checked;\n        });\n    }\n\n    getCheckedOption = (event) => {\n        let boxAll = document.getElementById(\"All\");\n\n        if (boxAll.checked === true) {\n            this.props.shipTypes.forEach((type) =>{\n                let currentBox =  document.getElementById(type.name);\n                currentBox.checked = true;\n            })\n            this.props.changeFilteredShips('All');\n        } else {\n            let options = [];\n            this.props.shipTypes.forEach((type) =>{\n                let currentBox =  document.getElementById(type.name);\n                if (currentBox.checked === true) {\n                    options.push(type.name)\n                }\n            })\n            this.props.changeFilteredShips(options);\n        }\n    }\n\n    _render() {\n        const { props } = this\n        if (!props.map || !props.controlPosition) return null;\n        render(\n            <form ref={\n                el => {\n                    if (!this.renderedOnce) {\n                        this.el = el\n                        props.map.controls[props.controlPosition].push(el)\n                    } else if (el && this.el && el !== this.el) {\n                        this.el.innerHTML = '';\n                        [].slice.call(el.childNodes).forEach(child => this.el.appendChild(child))\n                    }\n                    this.renderedOnce = true\n                }}>\n                  <div class=\"multiselect\">\n                      <div class=\"selectBox\" onClick={this.showCheckboxes}>\n                        <select className=\"mydropdown\">\n                          <option selected hidden>All</option>\n                        </select>\n                        {/* <div class=\"overSelect\"></div> */}\n                      </div>\n                      <div id=\"checkboxes\" onClick={this.getCheckedOption}>\n                          <label for=\"All\">\n                              <input type=\"checkbox\" id=\"All\" onClick={this.changeAllCheckBox}/>\n                              All\n                          </label>\n                          {this.props.shipTypes.map((type) => {\n                                return (\n                                    <lable for={type.name}>\n                                        <input type=\"checkbox\" id={type.name}/>\n                                        {type.name}\n                                        <br />\n                                    </lable>\n                                    \n                                )\n                          })}\n                      </div>\n                  </div>\n                {/* <select className=\"mydropdown\">\n                    <option value='All'>All</option>\n                    {this.props.shipTypes.map((type) => {\n                        return (\n                        <option\n                            className={this.props.activeShipTypes.includes(type) ? 'active' : ''}\n                            key={type.images.sys.id}\n                            value={type.name}\n                        >\n                            {type.name}\n                        </option>\n                        );\n                    })}\n                </select> */}\n\n            </form>,\n            document.createElement('div')\n        )\n    }\n\n    render() {\n        return <noscript/>\n    }\n}"]},"metadata":{},"sourceType":"module"}